<?xml version="1.0" encoding="utf-8"?>
<ctl:package
 xmlns:functions="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/functions.xml"
 xmlns:time="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/time.xml"
 xmlns:ccf="http://www.opengis.net/cite/complex"
 xmlns:cdf="http://www.opengis.net/cite/data"
 xmlns:cgf="http://www.opengis.net/cite/geometry"
 xmlns:citef="http://www.opengis.net/cite/functions"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wms="http://www.opengis.net/wms"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
>

   <ctl:parser name="time:autos-parser">
      <ctl:java class="com.occamlab.te.parsers.ImageParser" method="parseAsInitialized" initialized="true">
         <ctl:with-param name="instructions">
            <parsers:ImageParser>
               <parsers:model value="RGB">

                  <!-- 1: Auto 1.1 -->
                  <parsers:subimage x="135" y="105" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 2: Auto 1.2 -->
                  <parsers:subimage x="95" y="115" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 3: Auto 1.3 -->
                  <parsers:subimage x="60" y="125" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 4: Auto 1.4 -->
                  <parsers:subimage x="45" y="135" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 5: Auto 1.5 and Auto 2.8 -->
                  <parsers:subimage x="45" y="155" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 6: Auto 1.6 -->
                  <parsers:subimage x="45" y="185" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 7: Auto 1.7 -->
                  <parsers:subimage x="45" y="225" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 8: Auto 2.5 -->
                  <parsers:subimage x="45" y="5" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 9: Auto 2.6 -->
                  <parsers:subimage x="45" y="55" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 10: Auto 2.7 -->
                  <parsers:subimage x="45" y="105" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 11: Auto 2.9 -->
                  <parsers:subimage x="45" y="205" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 12: Auto 3.9 -->
                  <parsers:subimage x="75" y="215" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 13: Auto 3.10 -->
                  <parsers:subimage x="75" y="175" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 14: Auto 3.11 -->
                  <parsers:subimage x="75" y="135" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 15: Auto 3.12 -->
                  <parsers:subimage x="75" y="95" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 16: Auto 3.13 -->
                  <parsers:subimage x="75" y="55" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 17: Auto 4.12 -->
                  <parsers:subimage x="350" y="20" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

                  <!-- 18: Auto 4.13 -->
                  <parsers:subimage x="345" y="45" width="10" height="10">
                     <parsers:count bands="RGB" sample="0xffffff"/>
                  </parsers:subimage>

               </parsers:model>
            </parsers:ImageParser>
         </ctl:with-param>
      </ctl:java>
   </ctl:parser>

   <ctl:test name="time:time" isConformanceClass="true">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>Time request behaves properly.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="time:options-requirements"/>
         <ctl:call-test name="time:dims"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:options-requirements">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The requirements for testing the selected options are met.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="time:time-options-requirements"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:dims">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>Support for dimensional data is correct.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="time:time-dims"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:time-options-requirements">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The server supports the cite:Autos layer with a properly declared time dimenson.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:variable name="layer" select="wms:Capability/wms:Layer/descendant-or-self::wms:Layer[wms:Title = 'cite:Autos']"/>
         <xsl:variable name="dim" select="$layer/ancestor-or-self::wms:Layer/wms:Dimension[@name='time'][1]"/>
         <xsl:variable name="extent" select="concat(',', string($dim), ',')"/>
         <xsl:choose>
            <xsl:when test="not($layer/*)">
               <ctl:message>Error: No layer titled cite:Autos found.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:when test="not($dim/self::wms:Dimension)">
               <ctl:message>Error: The cite:Autos layer does not have an time dimension.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
               <xsl:if test="$dim/@units != 'ISO8601'">
                  <ctl:message>Error: The time dimension for the cite:Autos layer must be defined with units=&quot;ISO8601&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@multipleValues) != 1">
                  <ctl:message>Error: The time dimension for the cite:Autos layer must be defined with multipleValues=&quot;true&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="functions:boolean-as-integer($dim/@nearestValue) != 1">
                  <ctl:message>Error: The time dimension for the cite:Autos layer must be defined with nearestValue=&quot;true&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="not(contains($extent, ',2000-01-01T00:00:00Z/2000-01-01T00:01:00Z/PT5S,'))">
                  <ctl:message>Error: The time dimension for the cite:Autos layer must be defined using extent value &quot;2000-01-01T00:00:00Z/2000-01-01T00:01:00Z/PT5S&quot;.</ctl:message>
                  <ctl:fail/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:time-dims">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>Support for a layer that supports the time dimension is correct.</ctl:assertion>
      <ctl:code>
         <xsl:choose>
            <xsl:when test="//wms:Layer[wms:Title = 'cite:Autos']/ancestor-or-self::wms:Layer/wms:Dimension[functions:to-lowercase(@name)='time']">
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">1</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">2</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">3</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">4</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">5</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">6</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">7</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">8</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">9</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">10</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">11</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">12</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-each-instant">
                  <ctl:with-param name="instant-num">13</ctl:with-param>
               </ctl:call-test>
               <ctl:call-test name="time:time-interval"/>
               <ctl:call-test name="time:time-interval-and-instant"/>
               <ctl:call-test name="time:time-interval-list"/>
               <ctl:call-test name="time:time-instant-list"/>
               <ctl:call-test name="time:time-current-instant"/>
               <ctl:call-test name="time:time-current-interval"/>
               <ctl:call-test name="time:time-default"/>
               <!--                <ctl:call-test name="time:time-missing-dim"/> -->
               <ctl:call-test name="time:time-and-other-layer"/>
            </xsl:when>
            <xsl:otherwise>
               <ctl:message>No layers titled cite:Autos that support the time dimension.</ctl:message>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:time-each-instant">
      <ctl:param name="instant-num"/>
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>For time instant {$instant-num}, the appropriate map is returned.</ctl:assertion>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Autos']/wms:Name)"/>
         <xsl:variable name="instant">
            <xsl:text>2000-01-01T00:</xsl:text>
            <xsl:choose>
               <xsl:when test="$instant-num = 13">01:</xsl:when>
               <xsl:otherwise>00:</xsl:otherwise>
            </xsl:choose>
            <xsl:value-of select="format-number((($instant-num - 1) mod 12) * 5, '00')"/>
            <xsl:text>Z</xsl:text>
         </xsl:variable>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.0042,-0.0024,0.0042,0.0024</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">420</ctl:param>
               <ctl:param name="HeIgHt">240</ctl:param>
               <ctl:param name="TiMe">
                  <xsl:value-of select="functions:encode($instant)"/>
               </ctl:param>
               <time:autos-parser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:choose>
               <xsl:when test="$instant-num = 1">
                  <xsl:if test="number(parsers:subimage[1]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 17">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 2">
                  <xsl:if test="number(parsers:subimage[2]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 17">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 3">
                  <xsl:if test="number(parsers:subimage[3]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 17">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 4">
                  <xsl:if test="number(parsers:subimage[4]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 17">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 5">
                  <xsl:if test="number(parsers:subimage[5]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="number(parsers:subimage[8]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 16">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 6">
                  <xsl:if test="number(parsers:subimage[6]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="number(parsers:subimage[9]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 16">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 7">
                  <xsl:if test="number(parsers:subimage[7]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="number(parsers:subimage[10]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 16">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 8">
                  <xsl:if test="number(parsers:subimage[5]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 17">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 9">
                  <xsl:if test="number(parsers:subimage[11]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="number(parsers:subimage[12]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 16">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 10">
                  <xsl:if test="number(parsers:subimage[13]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 17">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 11">
                  <xsl:if test="number(parsers:subimage[14]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 17">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 12">
                  <xsl:if test="number(parsers:subimage[15]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="number(parsers:subimage[17]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 16">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
               <xsl:when test="$instant-num = 13">
                  <xsl:if test="number(parsers:subimage[16]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="number(parsers:subimage[18]/parsers:count) = 100">
                     <ctl:fail/>
                  </xsl:if>
                  <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 16">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:when>
            </xsl:choose>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:time-interval">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>For a time interval, the appropriate map is returned.</ctl:assertion>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Autos']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.0042,-0.0024,0.0042,0.0024</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">420</ctl:param>
               <ctl:param name="HeIgHt">240</ctl:param>
               <ctl:param name="TiMe">
                  <xsl:value-of select="functions:encode('2000-01-01T00:00:50Z/2000-01-01T00:01:00Z')"/>
               </ctl:param>
               <time:autos-parser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[14]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[15]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[16]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[17]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[18]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 13">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:time-interval-and-instant">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>For a time value consiting of a time interval and a time instant, the appropriate map is returned.</ctl:assertion>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Autos']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.0042,-0.0024,0.0042,0.0024</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">420</ctl:param>
               <ctl:param name="HeIgHt">240</ctl:param>
               <ctl:param name="TiMe">
                  <xsl:value-of select="functions:encode('2000-01-01T00:00:00Z')"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="functions:encode('2000-01-01T00:00:50Z/2000-01-01T00:01:00Z')"/>
               </ctl:param>
               <time:autos-parser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[1]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[14]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[15]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[16]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[17]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[18]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 12">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:time-interval-list">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>For a time value consiting of a list of time intervals, the appropriate map is returned.</ctl:assertion>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Autos']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.0042,-0.0024,0.0042,0.0024</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">420</ctl:param>
               <ctl:param name="HeIgHt">240</ctl:param>
               <ctl:param name="TiMe">
                  <xsl:value-of select="functions:encode('2000-01-01T00:00:00Z/2000-01-01T00:00:10Z')"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="functions:encode('2000-01-01T00:00:50Z/2000-01-01T00:01:00Z')"/>
               </ctl:param>
               <time:autos-parser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[1]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[2]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[3]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[14]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[15]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[16]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[17]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[18]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 10">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:time-instant-list">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>For a time value consiting of a list of time instants, the appropriate map is returned.</ctl:assertion>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Title = 'cite:Autos']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.0042,-0.0024,0.0042,0.0024</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">420</ctl:param>
               <ctl:param name="HeIgHt">240</ctl:param>
               <ctl:param name="TiMe">
                  <xsl:value-of select="functions:encode('2000-01-01T00:00:00Z')"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="functions:encode('2000-01-01T00:01:00Z')"/>
               </ctl:param>
               <time:autos-parser/>
            </ctl:request>
         </xsl:variable>
         <xsl:for-each select="$response/parsers:ImageParser/parsers:model">
            <xsl:if test="number(parsers:subimage[1]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[16]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="number(parsers:subimage[18]/parsers:count) = 100">
               <ctl:fail/>
            </xsl:if>
            <xsl:if test="count(parsers:subimage/parsers:count[number(.) = 100]) != 15">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:time-current-instant">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>If the time dimension supports the current keyword, a request for TIME=current returns a map.</ctl:assertion>
      <ctl:comment>Method: If the dimension decalaration sets the current attribute, submit a request with TIME=current and verify that the service returns a map</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Name and ancestor-or-self::wms:Layer/wms:Dimension[@name='time' and (@current='1' or @current='true')]][1]/wms:Name)"/>
         <xsl:variable name="layer-info">
            <ctl:call-function name="functions:layer-info">
               <ctl:with-param name="root-layer" select="wms:Capability/wms:Layer"/>
               <ctl:with-param name="preferred-name" select="$layer"/>
               <ctl:with-param name="preferred-crs">CRS:84</ctl:with-param>
               <ctl:with-param name="preferred-bbox"/>
               <ctl:with-param name="preferred-width">100</ctl:with-param>
               <ctl:with-param name="preferred-height">100</ctl:with-param>
            </ctl:call-function>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="$layer = ''">
               <ctl:message>No Named layers that support the current keyword for the time dimension.</ctl:message>
            </xsl:when>
            <xsl:otherwise>
               <xsl:variable name="response">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="LaYeRs">
                        <xsl:value-of select="functions:encode($layer-info/LayerInfo/@name)"/>
                     </ctl:param>
                     <ctl:param name="BbOx">
                        <xsl:value-of select="$layer-info/LayerInfo/@bbox"/>
                     </ctl:param>
                     <ctl:param name="CrS">
                        <xsl:value-of select="functions:encode($layer-info/LayerInfo/@crs)"/>
                     </ctl:param>
                     <ctl:param name="WiDtH">
                        <xsl:value-of select="$layer-info/LayerInfo/@width"/>
                     </ctl:param>
                     <ctl:param name="FoRmAt">
                        <xsl:value-of select="functions:encode($image-format)"/>
                     </ctl:param>
                     <ctl:param name="HeIgHt">
                        <xsl:value-of select="$layer-info/LayerInfo/@height"/>
                     </ctl:param>
                     <ctl:param name="VeRsIoN">
                        <xsl:value-of select="functions:version()"/>
                     </ctl:param>
                     <ctl:param name="StYlEs"/>
                     <ctl:param name="ReQuEsT">GetMap</ctl:param>
                     <ctl:param name="TiMe">current</ctl:param>
                     <parsers:HTTPParser>
                        <parsers:parse>
                           <parsers:NullParser/>
                        </parsers:parse>
                     </parsers:HTTPParser>
                  </ctl:request>
               </xsl:variable>
               <xsl:if test="functions:mime-match($response/response/headers/header[functions:to-lowercase(@name) = 'content-type'], $image-format) = 'false'">
                  <ctl:fail/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:time-current-interval">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>If the time dimension supports the current keyword and advertises an interval ending with current, a request for that interval returns a map.</ctl:assertion>
      <ctl:comment>Method: If the dimension decalaration sets the current attribute and advertises an interval ending with current, submit a request with TIME=current and verify that the service returns a map</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.elevation_and_time</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[1]"/>
         <xsl:variable name="dimension" select="//wms:Layer/wms:Dimension[@name='time' and (@current='1' or @current='true')][1]"/>
         <xsl:variable name="layer" select="string($dimension/../descendant-or-self::wms:Layer[wms:Name][1]/wms:Name)"/>
         <xsl:variable name="layer-info">
            <ctl:call-function name="functions:layer-info">
               <ctl:with-param name="root-layer" select="wms:Capability/wms:Layer"/>
               <ctl:with-param name="preferred-name" select="$layer"/>
               <ctl:with-param name="preferred-crs">CRS:84</ctl:with-param>
               <ctl:with-param name="preferred-bbox"/>
               <ctl:with-param name="preferred-width">100</ctl:with-param>
               <ctl:with-param name="preferred-height">100</ctl:with-param>
            </ctl:call-function>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="$layer = ''">
               <ctl:message>No Named layers that advertise an interval ending with current for the time dimension.</ctl:message>
            </xsl:when>
            <xsl:otherwise>
               <xsl:variable name="response">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="LaYeRs">
                        <xsl:value-of select="functions:encode($layer-info/LayerInfo/@name)"/>
                     </ctl:param>
                     <ctl:param name="BbOx">
                        <xsl:value-of select="$layer-info/LayerInfo/@bbox"/>
                     </ctl:param>
                     <ctl:param name="CrS">
                        <xsl:value-of select="functions:encode($layer-info/LayerInfo/@crs)"/>
                     </ctl:param>
                     <ctl:param name="WiDtH">
                        <xsl:value-of select="$layer-info/LayerInfo/@width"/>
                     </ctl:param>
                     <ctl:param name="FoRmAt">
                        <xsl:value-of select="functions:encode($image-format)"/>
                     </ctl:param>
                     <ctl:param name="HeIgHt">
                        <xsl:value-of select="$layer-info/LayerInfo/@height"/>
                     </ctl:param>
                     <ctl:param name="VeRsIoN">
                        <xsl:value-of select="functions:version()"/>
                     </ctl:param>
                     <ctl:param name="StYlEs"/>
                     <ctl:param name="ReQuEsT">GetMap</ctl:param>
                     <ctl:param name="TiMe">
                        <xsl:value-of select="functions:encode(concat(tokenize(string($dimension), ',\s*')[1], '/current'))"/>
                     </ctl:param>
                     <parsers:HTTPParser>
                        <parsers:parse>
                           <parsers:NullParser/>
                        </parsers:parse>
                     </parsers:HTTPParser>
                  </ctl:request>
               </xsl:variable>
               <xsl:if test="functions:mime-match($response/response/headers/header[functions:to-lowercase(@name) = 'content-type'], $image-format) = 'false'">
                  <ctl:fail/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="time:time-default">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>If the dimension decalaration includes a default value, a request without a TIME parameter returns a map and sets the "default value used" warning header.</ctl:assertion>
      <ctl:comment>Method: If the dimension decalaration includes a default value, submit a request without a TIME parameter and verify that the service returns a map and sets the "default value used" warning header</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.4.2">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.responses.default</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[1]"/>
         <xsl:variable name="dimension" select="//wms:Layer/wms:Dimension[@name='time' and @default][1]"/>
         <xsl:variable name="layer" select="string($dimension/../descendant-or-self::wms:Layer[wms:Name][1]/wms:Name)"/>
         <xsl:variable name="layer-info">
            <ctl:call-function name="functions:layer-info">
               <ctl:with-param name="root-layer" select="wms:Capability/wms:Layer"/>
               <ctl:with-param name="preferred-name" select="$layer"/>
               <ctl:with-param name="preferred-crs">CRS:84</ctl:with-param>
               <ctl:with-param name="preferred-bbox"/>
               <ctl:with-param name="preferred-width">100</ctl:with-param>
               <ctl:with-param name="preferred-height">100</ctl:with-param>
            </ctl:call-function>
         </xsl:variable>
         <xsl:choose>
            <xsl:when test="$layer = ''">
               <ctl:message>No Named layers with a default value for the time dimension.</ctl:message>
            </xsl:when>
            <xsl:otherwise>
               <xsl:variable name="response">
                  <ctl:request>
                     <ctl:url>
                        <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
                     </ctl:url>
                     <ctl:method>get</ctl:method>
                     <ctl:param name="LaYeRs">
                        <xsl:value-of select="functions:encode($layer-info/LayerInfo/@name)"/>
                     </ctl:param>
                     <ctl:param name="BbOx">
                        <xsl:value-of select="$layer-info/LayerInfo/@bbox"/>
                     </ctl:param>
                     <ctl:param name="CrS">
                        <xsl:value-of select="functions:encode($layer-info/LayerInfo/@crs)"/>
                     </ctl:param>
                     <ctl:param name="WiDtH">
                        <xsl:value-of select="$layer-info/LayerInfo/@width"/>
                     </ctl:param>
                     <ctl:param name="FoRmAt">
                        <xsl:value-of select="functions:encode($image-format)"/>
                     </ctl:param>
                     <ctl:param name="HeIgHt">
                        <xsl:value-of select="$layer-info/LayerInfo/@height"/>
                     </ctl:param>
                     <ctl:param name="VeRsIoN">
                        <xsl:value-of select="functions:version()"/>
                     </ctl:param>
                     <ctl:param name="StYlEs"/>
                     <ctl:param name="ReQuEsT">GetMap</ctl:param>
                     <parsers:HTTPParser>
                        <parsers:parse>
                           <parsers:NullParser/>
                        </parsers:parse>
                     </parsers:HTTPParser>
                  </ctl:request>
               </xsl:variable>
               <xsl:if test="functions:mime-match($response/response/headers/header[functions:to-lowercase(@name) = 'content-type'], $image-format) = 'false'">
                  <ctl:message>Content-type header is not corrrect</ctl:message>
                  <ctl:fail/>
               </xsl:if>
               <xsl:if test="not($response/response/headers/header[@name='Warning' and starts-with(., '99 D') and starts-with(functions:to-lowercase(.), '99 default value used: time=') and starts-with(substring(., 29), $dimension/@default)])">
                  <ctl:message>A correct "Default value used" warning header was not set</ctl:message>
                  <ctl:fail/>
               </xsl:if>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>
   <!--
      <ctl:test name="time:time-missing-dim">
         <ctl:context>WMS_Capabilities element</ctl:context>
         <ctl:assertion>If the dimension decalaration does not include a default value, a request without a TIME parameter produces an exception with code=MissingDimensionValue.</ctl:assertion>
         <ctl:comment>Method: If the dimension decalaration does not include a default value, submit a request without a TIME parameter and verify that the service returns an exception with code=MissingDimensionValue</ctl:comment>
         <ctl:link title="WMS 1.3.0 section C.4.1">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.responses.incorrect</ctl:link>
         <ctl:code>
            <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[1]"/>
            <xsl:variable name="dimension" select="//wms:Layer/wms:Dimension[@name='time' and (not(@default) or @default='0' or @default='false')][1]"/>
            <xsl:variable name="layer" select="string($dimension/../descendant-or-self::wms:Layer[wms:Name][1]/wms:Name)"/>
            <xsl:variable name="layer-info">
               <ctl:call-function name="functions:layer-info">
                  <ctl:with-param name="root-layer" select="wms:Capability/wms:Layer"/>
                  <ctl:with-param name="preferred-name" select="$layer"/>
                  <ctl:with-param name="preferred-crs">CRS:84</ctl:with-param>
                  <ctl:with-param name="preferred-bbox"/>
                  <ctl:with-param name="preferred-width">100</ctl:with-param>
                  <ctl:with-param name="preferred-height">100</ctl:with-param>
               </ctl:call-function>
            </xsl:variable>
            <xsl:choose>
               <xsl:when test="$layer = ''">
                  <ctl:message>No Named layers with a time dimension without a default value.</ctl:message>
               </xsl:when>
               <xsl:otherwise>
                  <xsl:variable name="response">
                     <ctl:request>
                        <ctl:url>
                           <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
                        </ctl:url>
                        <ctl:method>get</ctl:method>
                        <ctl:param name="LaYeRs">
                           <xsl:value-of select="functions:encode($layer-info/LayerInfo/@name)"/>
                        </ctl:param>
                        <ctl:param name="BbOx">
                           <xsl:value-of select="$layer-info/LayerInfo/@bbox"/>
                        </ctl:param>
                        <ctl:param name="CrS">
                           <xsl:value-of select="functions:encode($layer-info/LayerInfo/@crs)"/>
                        </ctl:param>
                        <ctl:param name="WiDtH">
                           <xsl:value-of select="$layer-info/LayerInfo/@width"/>
                        </ctl:param>
                        <ctl:param name="FoRmAt">
                           <xsl:value-of select="functions:encode($image-format)"/>
                        </ctl:param>
                        <ctl:param name="HeIgHt">
                           <xsl:value-of select="$layer-info/LayerInfo/@height"/>
                        </ctl:param>
                        <ctl:param name="VeRsIoN">
                           <xsl:value-of select="functions:version()"/>
                        </ctl:param>
                        <ctl:param name="StYlEs"/>
                        <ctl:param name="ReQuEsT">GetMap</ctl:param>
                     </ctl:request>
                  </xsl:variable>
                  <xsl:if test="not($response/ogc:ServiceExceptionReport/ogc:ServiceException[@code='MissingDimensionValue'])">
                     <ctl:fail/>
                  </xsl:if>
               </xsl:otherwise>
            </xsl:choose>
         </ctl:code>
      </ctl:test>
   -->
   <ctl:test name="time:time-and-other-layer">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When a layer that supports time and other layers that do not support time are requested, the response is a map.</ctl:assertion>
      <ctl:comment>Method: Submit a request involving both the Autos layer and a layer that does not support the TIME dimension and verify that the response is a map</ctl:comment>
      <ctl:link title="WMS 1.3.0 section C.3.5">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#dims.requests.applicability</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer1" select="string(//wms:Layer[wms:Title = 'cite:DividedRoutes']/wms:Name)"/>
         <xsl:variable name="layer2" select="string(//wms:Layer[wms:Title = 'cite:RoadSegments']/wms:Name)"/>
         <xsl:variable name="layer3" select="string(//wms:Layer[wms:Title = 'cite:Autos']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">-0.0042,-0.0024,0.0042,0.0024</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer1)"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="functions:encode($layer2)"/>
                  <xsl:text>,</xsl:text>
                  <xsl:value-of select="functions:encode($layer3)"/>
               </ctl:param>
               <ctl:param name="CrS">
                  <xsl:value-of select="functions:encode('CRS:84')"/>
               </ctl:param>
               <ctl:param name="WiDtH">420</ctl:param>
               <ctl:param name="HeIgHt">240</ctl:param>
               <ctl:param name="TiMe">
                  <xsl:value-of select="functions:encode('2000-01-01T00:00:30Z')"/>
               </ctl:param>
               <parsers:HTTPParser>
                  <parsers:parse>
                     <parsers:NullParser/>
                  </parsers:parse>
               </parsers:HTTPParser>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="functions:mime-match($response/response/headers/header[functions:to-lowercase(@name) = 'content-type'], $image-format) = 'false'">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

</ctl:package>
