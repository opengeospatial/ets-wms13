<?xml version="1.0" encoding="utf-8"?>
<ctl:package
 xmlns:functions="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/functions.xml"
 xmlns:basic="https://cite.opengeospatial.org/wms-1.3.0/src/ctl/basic.xml"
 xmlns:ccf="http://www.opengis.net/cite/complex"
 xmlns:cdf="http://www.opengis.net/cite/data"
 xmlns:cgf="http://www.opengis.net/cite/geometry"
 xmlns:citef="http://www.opengis.net/cite/functions"
 xmlns:ctl="http://www.occamlab.com/ctl"
 xmlns:gml="http://www.opengis.net/gml"
 xmlns:ogc="http://www.opengis.net/ogc"
 xmlns:parsers="http://www.occamlab.com/te/parsers"
 xmlns:saxon="http://saxon.sf.net/"
 xmlns:wms="http://www.opengis.net/wms"
 xmlns:xlink="http://www.w3.org/1999/xlink"
 xmlns:xs="http://www.w3.org/2001/XMLSchema"
 xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
>

   <ctl:test name="basic:basic" isConformanceClass="true" isBasic="true">
      <ctl:param name="is-interactive-enabled"/>
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>Basic request behaves properly.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="basic:options-requirements"/>
         <ctl:call-test name="basic:getmap"/>
         <xsl:if test="$is-interactive-enabled='yes'">
            <ctl:call-test name="basic:interactive"/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:options-requirements">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The requirements for testing the selected options are met.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="basic:gif-or-png"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:getmap">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>The GetMap request behaves properly.</ctl:assertion>
      <ctl:code>
         <xsl:choose>
            <xsl:when test="not(wms:Capability//wms:Layer/wms:Name)">
               <ctl:message>Error: No Named layers in capabilities XML.</ctl:message>
               <ctl:fail/>
            </xsl:when>
            <xsl:otherwise>
               <ctl:call-test name="basic:bbox"/>
               <ctl:call-test name="basic:bgcolor"/>
               <ctl:call-test name="basic:transparent"/>
            </xsl:otherwise>
         </xsl:choose>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:interactive">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>The tests that require user interaction behave properly.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="basic:basic-polygons-sanity-check"/>
         <ctl:call-test name="basic:blue-lake-sanity-check"/>
         <ctl:call-test name="basic:layer-order"/>
         <ctl:call-test name="basic:aspect-ratio"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:gif-or-png">
      <ctl:context>Capabilities XML</ctl:context>
      <ctl:assertion>The server supports GetMap format image/gif and/or image/png.</ctl:assertion>
      <ctl:link title="Test requirements">docs/wms/1.3.0/#requirements</ctl:link>
      <ctl:code>
         <xsl:for-each select="wms:Capability/wms:Request/wms:GetMap">
            <xsl:if test="not(wms:Format[. = 'image/gif' or contains(.,'image/png')])">
               <ctl:fail/>
            </xsl:if>
         </xsl:for-each>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:bbox">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>The BBOX parameter behaves properly.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="basic:bbox-exponential"/>
         <ctl:call-test name="basic:bbox-pixel-interpretation"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:bgcolor">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>The BGCOLOR parameter behaves properly.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="basic:no-bgcolor"/>
         <ctl:call-test name="basic:blue-bgcolor"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:transparent">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>The TRANSPARENT parameter behaves properly.</ctl:assertion>
      <ctl:code>
         <ctl:call-test name="basic:transparent-true"/>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:bbox-exponential">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When a GetMap request uses exponential notation values for the BBOX parameter, then the response is valid.</ctl:assertion>
      <ctl:comment/>
      <ctl:link title="WMS 1.3.0 section 7.3.3.6">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#wmsops.getmap.params.bbox</ctl:link>
      <ctl:link title="WMS 1.3.0 section 6.5">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#basic_elements.numeric_and_boolean</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="streams" select="string(wms:Capability//wms:Layer[wms:Name = 'cite:Streams']/wms:Name)"/>
         <xsl:variable name="lakes" select="string(wms:Capability//wms:Layer[wms:Name = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="ponds" select="string(wms:Capability//wms:Layer[wms:Name = 'cite:Ponds']/wms:Name)"/>
         <xsl:variable name="bridges" select="string(wms:Capability//wms:Layer[wms:Name = 'cite:Bridges']/wms:Name)"/>
         <xsl:variable name="road-segments" select="string(wms:Capability//wms:Layer[wms:Name = 'cite:RoadSegments']/wms:Name)"/>
         <xsl:variable name="divided-routes" select="string(wms:Capability//wms:Layer[wms:Name = 'cite:DividedRoutes']/wms:Name)"/>
         <xsl:variable name="buildings" select="string(wms:Capability//wms:Layer[wms:Name = 'cite:Buildings']/wms:Name)"/>
         <xsl:variable name="map-neatline" select="string(wms:Capability//wms:Layer[wms:Name = 'cite:MapNeatline']/wms:Name)"/>

         <xsl:variable name="response-1">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="$streams"/>,<xsl:value-of select="$lakes"/>,<xsl:value-of select="$ponds"/>,<xsl:value-of select="$bridges"/>,<xsl:value-of select="$road-segments"/>,<xsl:value-of select="$divided-routes"/>,<xsl:value-of select="$buildings"/>,<xsl:value-of select="$map-neatline"/>
               </ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="CrS">CRS:84</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="WiDtH">400</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="HeIgHt">200</ctl:param>
               <ctl:param name="BbOx">-0.005,-0.0025,0.005,0.0025</ctl:param>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="ARGB">
                     <parsers:checksum></parsers:checksum>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>

         <xsl:variable name="response-2">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="HeIgHt">200</ctl:param>
               <ctl:param name="WiDtH">400</ctl:param>
               <ctl:param name="CrS">CRS:84</ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="$streams"/>,<xsl:value-of select="$lakes"/>,<xsl:value-of select="$ponds"/>,<xsl:value-of select="$bridges"/>,<xsl:value-of select="$road-segments"/>,<xsl:value-of select="$divided-routes"/>,<xsl:value-of select="$buildings"/>,<xsl:value-of select="$map-neatline"/>
               </ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="BbOx">-.0005E1,-25E-4,%2B05E-3,.00025E%2B1</ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="ARGB">
                     <parsers:checksum></parsers:checksum>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>

         <xsl:if test="not($response-1/parsers:ImageParser/parsers:model/parsers:checksum = $response-2/parsers:ImageParser/parsers:model/parsers:checksum)">
            <ctl:message>Error: The image produced using exponential notation in the bbox is not the same as the image produced without using exponential notation.</ctl:message>
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:bbox-pixel-interpretation">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>The server interprets the bounding box as going around the "outside" of the pixels of the image rather than through the centers of the border pixels.</ctl:assertion>
      <ctl:comment><![CDATA[The test verifies that none of the border pixels in the image returned are white]]></ctl:comment>
      <ctl:link title="WMS 1.3.0 section 7.3.3.6">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#wmsops.getmap.params.bbox</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Name = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="StYlEs"/>
               <ctl:param name="HeIgHt">7</ctl:param>
               <ctl:param name="CrS">CRS:84</ctl:param>
               <ctl:param name="BbOx">0.0016,-0.0012,0.0026,-0.0005</ctl:param>
               <ctl:param name="WiDtH">10</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="$layer"/>
               </ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="RGB">
                     <parsers:subimage x="0" y="0" width="10" height="1">
                        <parsers:count bands="RGB" sample="0xffffff"></parsers:count>
                     </parsers:subimage>
                     <parsers:subimage x="0" y="6" width="10" height="1">
                        <parsers:count bands="RGB" sample="0xffffff"></parsers:count>
                     </parsers:subimage>
                     <parsers:subimage x="0" y="1" width="1" height="5">
                        <parsers:count bands="RGB" sample="0xffffff"></parsers:count>
                     </parsers:subimage>
                     <parsers:subimage x="9" y="1" width="1" height="5">
                        <parsers:count bands="RGB" sample="0xffffff"></parsers:count>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="not(count($response/parsers:ImageParser/parsers:model/parsers:subimage[parsers:count = 0]) = 4)">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:no-bgcolor">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When a GetMap request is made with no BGCOLOR parameter, then areas which are not covered contain white (0xFFFFFF) pixels.</ctl:assertion>
      <ctl:comment/>
      <ctl:link title="WMS 1.3.0 section 7.3.3.10">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#wmsops.getmap.params.bgcolor</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Name = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="StYlEs"/>
               <ctl:param name="WiDtH">200</ctl:param>
               <ctl:param name="BbOx">0,-0.0020,0.0040,0</ctl:param>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <ctl:param name="CrS">CRS:84</ctl:param>
               <ctl:param name="HeIgHt">100</ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="RGB">
                     <parsers:subimage x="0" y="0" width="25" height="100">
                        <parsers:count bands="RGB" sample="0xffffff"></parsers:count>
                     </parsers:subimage>
                     <parsers:subimage x="150" y="0" width="50" height="50">
                        <parsers:count bands="RGB" sample="0xffffff"></parsers:count>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="not(count($response/parsers:ImageParser/parsers:model/parsers:subimage[parsers:count = 2500]) = 2)">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:blue-bgcolor">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When a GetMap request is made with a BGCOLOR parameter, then areas which are not covered are set to the value of BGCOLOR.</ctl:assertion>
      <ctl:comment/>
      <ctl:link title="WMS 1.3.0 section 7.3.3.10">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#wmsops.getmap.params.bgcolor</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="layer" select="string(//wms:Layer[wms:Name = 'cite:Lakes']/wms:Name)"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="BgCoLoR">0x0000FF</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="BbOx">0,-0.0020,0.0040,0</ctl:param>
               <ctl:param name="HeIgHt">100</ctl:param>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="WiDtH">200</ctl:param>
               <ctl:param name="CrS">CRS:84</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode($layer)"/>
               </ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="RGB">
                     <parsers:subimage x="0" y="0" width="25" height="100">
                        <parsers:count bands="RGB" sample="0x0000ff"></parsers:count>
                     </parsers:subimage>
                     <parsers:subimage x="150" y="0" width="50" height="50">
                        <parsers:count bands="RGB" sample="0x0000ff"></parsers:count>
                     </parsers:subimage>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="not(count($response/parsers:ImageParser/parsers:model/parsers:subimage[parsers:count = 2500]) = 2)">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:transparent-true">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When a GetMap request is made with TRANSPARENT=TRUE and a FORMAT that supports transparency over a BBOX that is not completely covered, then the response contains transparent pixels.</ctl:assertion>
      <ctl:comment/>
      <ctl:link title="WMS 1.3.0 section 7.3.3.9">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#wmsops.getmap.params.transparent</ctl:link>
      <ctl:code>
         <xsl:variable name="image-format" select="wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif')][1]"/>
         <xsl:variable name="response">
            <ctl:request>
               <ctl:url>
                  <xsl:value-of select="wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href"/>
               </ctl:url>
               <ctl:method>get</ctl:method>
               <ctl:param name="TrAnSpArEnT">TRUE</ctl:param>
               <ctl:param name="CrS">CRS:84</ctl:param>
               <ctl:param name="FoRmAt">
                  <xsl:value-of select="functions:encode($image-format)"/>
               </ctl:param>
               <ctl:param name="VeRsIoN">
                  <xsl:value-of select="functions:version()"/>
               </ctl:param>
               <ctl:param name="HeIgHt">100</ctl:param>
               <ctl:param name="WiDtH">200</ctl:param>
               <ctl:param name="StYlEs"/>
               <ctl:param name="LaYeRs">
                  <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name='cite:Lakes']/wms:Name))"/>
               </ctl:param>
               <ctl:param name="ReQuEsT">GetMap</ctl:param>
               <ctl:param name="BbOx">0,-0.0020,0.0040,0</ctl:param>
               <parsers:ImageParser>
                  <parsers:model value="ARGB">
                     <parsers:count bands="A" sample="0x00"></parsers:count>
                  </parsers:model>
               </parsers:ImageParser>
            </ctl:request>
         </xsl:variable>
         <xsl:if test="not($response/parsers:ImageParser/parsers:model/parsers:count)">
            <ctl:fail/>
         </xsl:if>
         <xsl:if test="number($response/parsers:ImageParser/parsers:model/parsers:count) = 0">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:basic-polygons-sanity-check">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>The diamond from the cite:BasicPolygons layer displays correctly.</ctl:assertion>
      <ctl:code>
         <xsl:variable name="form-values">
            <ctl:form width="700" height="500">
               <img border="1">
                  <xsl:attribute name="src">
                     <xsl:value-of select="functions:correct-url-prefix(wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href)"/>
                     <xsl:text>VERSION=</xsl:text>
                     <xsl:value-of select="functions:version()"/>
                     <xsl:text>&amp;REQUEST=GetMap</xsl:text>
                     <xsl:text>&amp;LAYERS=</xsl:text>
                     <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:BasicPolygons']/wms:Name))"/>
                     <xsl:text>&amp;STYLES=</xsl:text>
                     <xsl:text>&amp;CRS=CRS:84</xsl:text>
                     <xsl:text>&amp;BBOX=-1,-1,1,1</xsl:text>
                     <xsl:text>&amp;WIDTH=300</xsl:text>
                     <xsl:text>&amp;HEIGHT=300</xsl:text>
                     <xsl:text>&amp;FORMAT=</xsl:text>
                     <xsl:value-of select="functions:encode(wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif') or starts-with(., 'image/jpeg')][1])"/>
                  </xsl:attribute>
               </img>
               <p>
                  Does the image above depict a large diamond that fills the frame?
               </p>
               <p>
                  <input type="submit" name="submit" value="yes"/>
                  <input type="submit" name="submit" value="no"/>
               </p>
            </ctl:form>
         </xsl:variable>
         <xsl:if test="not($form-values/values/value[@key='submit']='yes')">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:blue-lake-sanity-check">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>The layers from the Blue Lake dataset display correctly.</ctl:assertion>
      <ctl:code>
         <xsl:variable name="form-values">
            <ctl:form width="700" height="500">
               <img>
                  <xsl:attribute name="src">
                     <xsl:value-of select="functions:correct-url-prefix(wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href)"/>
                     <xsl:text>VERSION=</xsl:text>
                     <xsl:value-of select="functions:version()"/>
                     <xsl:text>&amp;REQUEST=GetMap</xsl:text>
                     <xsl:text>&amp;LAYERS=</xsl:text>
                     <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Streams']/wms:Name))"/>
                     <xsl:text>,</xsl:text>
                     <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Lakes']/wms:Name))"/>
                     <xsl:text>,</xsl:text>
                     <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Ponds']/wms:Name))"/>
                     <xsl:text>,</xsl:text>
                     <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Bridges']/wms:Name))"/>
                     <xsl:text>,</xsl:text>
                     <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:RoadSegments']/wms:Name))"/>
                     <xsl:text>,</xsl:text>
                     <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:DividedRoutes']/wms:Name))"/>
                     <xsl:text>,</xsl:text>
                     <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Buildings']/wms:Name))"/>
                     <xsl:text>,</xsl:text>
                     <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:MapNeatline']/wms:Name))"/>
                     <xsl:text>&amp;STYLES=</xsl:text>
                     <xsl:text>&amp;CRS=CRS:84</xsl:text>
                     <xsl:text>&amp;BBOX=-0.005,-0.0025,.005,0.0025</xsl:text>
                     <xsl:text>&amp;WIDTH=400</xsl:text>
                     <xsl:text>&amp;HEIGHT=200</xsl:text>
                     <xsl:text>&amp;FORMAT=</xsl:text>
                     <xsl:value-of select="functions:encode(wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif') or starts-with(., 'image/jpeg')][1])"/>
                  </xsl:attribute>
               </img>
               <p>
                  Does the image above depict a map of the Blue Lake vicinity with a surrounding neatline?
               </p>
               <p>
                  <input type="submit" name="submit" value="yes"/>
                  <input type="submit" name="submit" value="no"/>
               </p>
            </ctl:form>
         </xsl:variable>
         <xsl:if test="not($form-values/values/value[@key='submit']='yes')">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:layer-order">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When a GetMap request contains multiple layers, then the response renders the requested layers by drawing the leftmost in the list bottommost, and the next one over that.</ctl:assertion>
      <ctl:comment>The user will be asked to manually verify that for request #1, Goose Island, Blue Lake, and Ashton are above State Forest.  For request #2, State Forest is above Ashton, and Blue Lake and Goose Island are not visible.  Depending on the styles the implementation uses, it may not be possible to tell which feature is on top of another.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section 7.3.3.3">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#wmsops.getmap.params.layers</ctl:link>
      <ctl:code>
         <xsl:variable name="form-values">
            <ctl:form width="700" height="500">
               <table>
                  <tr>
                     <td>
                        <img>
                           <xsl:attribute name="src">
                              <xsl:value-of select="functions:correct-url-prefix(wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href)"/>
                              <xsl:text>VERSION=</xsl:text>
                              <xsl:value-of select="functions:version()"/>
                              <xsl:text>&amp;REQUEST=GetMap</xsl:text>
                              <xsl:text>&amp;LAYERS=</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Forests']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Lakes']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:NamedPlaces']/wms:Name))"/>
                              <xsl:text>&amp;STYLES=</xsl:text>
                              <xsl:text>&amp;CRS=CRS:84</xsl:text>
                              <xsl:text>&amp;BBOX=-0.0042,-0.0024,0.0042,0.0024</xsl:text>
                              <xsl:text>&amp;WIDTH=168</xsl:text>
                              <xsl:text>&amp;HEIGHT=96</xsl:text>
                              <xsl:text>&amp;FORMAT=</xsl:text>
                              <xsl:value-of select="functions:encode(wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif') or starts-with(., 'image/jpeg')][1])"/>
                           </xsl:attribute>
                        </img>
                     </td>
                     <td>
                        <img>
                           <xsl:attribute name="src">
                              <xsl:value-of select="functions:correct-url-prefix(wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href)"/>
                              <xsl:text>VERSION=</xsl:text>
                              <xsl:value-of select="functions:version()"/>
                              <xsl:text>&amp;REQUEST=GetMap</xsl:text>
                              <xsl:text>&amp;LAYERS=</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:NamedPlaces']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Lakes']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Forests']/wms:Name))"/>
                              <xsl:text>&amp;STYLES=</xsl:text>
                              <xsl:text>&amp;CRS=CRS:84</xsl:text>
                              <xsl:text>&amp;BBOX=-0.0042,-0.0024,0.0042,0.0024</xsl:text>
                              <xsl:text>&amp;WIDTH=168</xsl:text>
                              <xsl:text>&amp;HEIGHT=96</xsl:text>
                              <xsl:text>&amp;FORMAT=</xsl:text>
                              <xsl:value-of select="functions:encode(wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif') or starts-with(., 'image/jpeg')][1])"/>
                           </xsl:attribute>
                        </img>
                     </td>
                  </tr>
               </table>
               <p>
                  In the picture on the left, Goose Island, Blue Lake, and Ashton should overlay State Forest.
                  In the picture on the right, State Forest should be on top of Ashton, Blue Lake, and Goose Island.
                  Are the pictures correct?
               </p>
               <p>
                  <input xmlns="" type="submit" name="submit" value="yes"/>
                  <input xmlns="" type="submit" name="submit" value="no"/>
               </p>
            </ctl:form>
         </xsl:variable>
         <xsl:if test="not($form-values/values/value[@key='submit']='yes')">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

   <ctl:test name="basic:aspect-ratio">
      <ctl:context>WMS_Capabilities element</ctl:context>
      <ctl:assertion>When a GetMap request is made where the aspect ratio of the BBOX and the aspect ratio of the WIDTH/HEIGHT parameters is different, then the map returned is stretched.</ctl:assertion>
      <ctl:comment>The user will be asked to manually verify that the two images look the same, except that the image #2 is stretched so it is twice as tall as image #1.</ctl:comment>
      <ctl:link title="WMS 1.3.0 section 7.3.3.8">http://cite.opengeospatial.org/OGCTestData/wms/1.3.0/spec/wms1_3.html#wmsops.getmap.params.width_height</ctl:link>
      <ctl:code>
         <xsl:variable name="form-values">
            <ctl:form width="700" height="500">
               <table>
                  <tr>
                     <td>
                        <img>
                           <xsl:attribute name="src">
                              <xsl:value-of select="functions:correct-url-prefix(wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href)"/>
                              <xsl:text>VERSION=</xsl:text>
                              <xsl:value-of select="functions:version()"/>
                              <xsl:text>&amp;REQUEST=GetMap</xsl:text>
                              <xsl:text>&amp;LAYERS=</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Streams']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Lakes']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Ponds']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Bridges']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:RoadSegments']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:DividedRoutes']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Buildings']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:MapNeatline']/wms:Name))"/>
                              <xsl:text>&amp;STYLES=</xsl:text>
                              <xsl:text>&amp;CRS=CRS:84</xsl:text>
                              <xsl:text>&amp;BBOX=-0.005,-0.0025,0.005,0.0025</xsl:text>
                              <xsl:text>&amp;WIDTH=200</xsl:text>
                              <xsl:text>&amp;HEIGHT=100</xsl:text>
                              <xsl:text>&amp;FORMAT=</xsl:text>
                              <xsl:value-of select="functions:encode(wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif') or starts-with(., 'image/jpeg')][1])"/>
                           </xsl:attribute>
                        </img>
                     </td>
                     <td>
                        <img>
                           <xsl:attribute name="src">
                              <xsl:value-of select="functions:correct-url-prefix(wms:Capability/wms:Request/wms:GetMap/wms:DCPType/wms:HTTP/wms:Get/wms:OnlineResource/@xlink:href)"/>
                              <xsl:text>VERSION=</xsl:text>
                              <xsl:value-of select="functions:version()"/>
                              <xsl:text>&amp;REQUEST=GetMap</xsl:text>
                              <xsl:text>&amp;LAYERS=</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Streams']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Lakes']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Ponds']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Bridges']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:RoadSegments']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:DividedRoutes']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:Buildings']/wms:Name))"/>
                              <xsl:text>,</xsl:text>
                              <xsl:value-of select="functions:encode(string(wms:Capability//wms:Layer[wms:Name = 'cite:MapNeatline']/wms:Name))"/>
                              <xsl:text>&amp;STYLES=</xsl:text>
                              <xsl:text>&amp;CRS=CRS:84</xsl:text>
                              <xsl:text>&amp;BBOX=-0.005,-0.0025,0.005,0.0025</xsl:text>
                              <xsl:text>&amp;WIDTH=200</xsl:text>
                              <xsl:text>&amp;HEIGHT=200</xsl:text>
                              <xsl:text>&amp;FORMAT=</xsl:text>
                              <xsl:value-of select="functions:encode(wms:Capability/wms:Request/wms:GetMap/wms:Format[starts-with(., 'image/png') or starts-with(., 'image/gif') or starts-with(., 'image/jpeg')][1])"/>
                           </xsl:attribute>
                        </img>
                     </td>
                  </tr>
               </table>
               <p>
                  The two pictures above should depict the same scene, but the picture on the right should be stretched so it is twice as tall as the picture on the left.
                  Are the pictures correct?
               </p>
               <p>
                  <input xmlns="" type="submit" name="submit" value="yes"/>
                  <input xmlns="" type="submit" name="submit" value="no"/>
               </p>
            </ctl:form>
         </xsl:variable>
         <xsl:if test="not($form-values/values/value[@key='submit']='yes')">
            <ctl:fail/>
         </xsl:if>
      </ctl:code>
   </ctl:test>

</ctl:package>
